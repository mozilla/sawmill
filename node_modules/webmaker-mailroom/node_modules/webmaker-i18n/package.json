{
  "name": "webmaker-i18n",
  "version": "0.3.21",
  "description": "Webmaker Localization Components for node.js and the browser",
  "main": "./i18n.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/mozilla/node-webmaker-i18n.git"
  },
  "keywords": [
    "webmaker"
  ],
  "dependencies": {
    "lodash": "2.2.1",
    "langmap": "latest"
  },
  "devDependencies": {
    "mocha": "~1.15.1",
    "should": "~2.1.1",
    "superagent": "~0.15.7",
    "supertest": "0.11.0",
    "express": "~3.2.0"
  },
  "scripts": {
    "test": "mocha --reporter spec tests"
  },
  "author": {
    "name": "The Webmaker Team",
    "email": "webmaker-dev@mozilla.org"
  },
  "license": "MPL-2.0",
  "readme": "node-webmaker-i18n\n==================\n\n[![Build Status](https://travis-ci.org/mozilla/node-webmaker-i18n.png)](https://travis-ci.org/mozilla/node-webmaker-i18n)\n\nWebmaker Localization Components for node.js and the browser.\n\nThis code is heavily inspired by, and borrows from, [Mozilla's i18n-abide](https://github.com/mozilla/i18n-abide) project.\nHowever, this code has been stripped down to support only those things needed by the Webmaker tools and apps, and is based on\nJSON instead of PO files, uses a different form of client-side localization, etc.\n\n# Usage\n\n## Server-Side with node.js\n\nInstall the node.js module using npm:\n\n```\n$ npm install webmaker-i18n\n```\n\n## Example\n\nThere is an example Express app in the `example/` directory. To run it:\n\n```\n$ npm install\n$ cd example\n$ node app.js\n```\n\nNow navigate to http://localhost:8000.  You'll see examples of server-side and client-side usage.\n\n## API\n\nThe module exposes a number of useful functions, including:\n\n### middleware\n\nThe `middleware` function is used with Express. It should be placed early on in the order of your middleware\nfunctions, such that it can detect and process any extra language (i.e., language codes on the URL or\naccept-language header. You use it like so:\n\n```javascript\nvar i18n = require('webmaker-i18n');\n...\napp.use(i18n.middleware({\n  supported_languages: [\n    'en-US', 'th-TH', 'ru'\n  ],\n  default_lang: 'en-US',\n  translation_directory: path.join( __dirname, 'locale' )\n}));\n```\n\nThis will cause the app to look for three locales on startup:\n\n* `locale/en_US`\n* `locale/th_TH`\n* `locale/ru`\n\nYou can change the root locale directory by passing `translation_directory` with another path to the\n`middleware` function.  Notice how the language tags have been converted\nto locale names (i.e., en-US becomes en_US). Each locale directory must have one file named `messages.json`\nwhich contains the strings for the locale.\n\nWhen `middleware` is used, all subsequent middleware and routes will have `req` and `res` objects\nwith additional features. These include:\n\n* `gettext` - a function used to get a localized string for a given key\n* `format` - a function used to interpolate strings (see below)\n\n#### Cookie Session locale support\n\nIf have more than one server and want to share user's preferred locale you have to setup `middleware` before `express cookieSession()` and make sure you have `locale` set in `req.session.user.prefLocale`.\n\nThe language serving is in this order:\n\n1. Locale in the URL\n2. 2. Locale in session (i.e., `req.session.user.prefLocale` from user's session cookie)\n3. 3. Locale in browser's request headers\n\n#### Dynamic Mappings\n\nOften one wants to map locale-specific languages to a default.  For example, if there are 3 locales specified\nfor English: `en-US`, `en-GB`, `en-CA`.  If a user requests `en`, we might choose to use `en-US` as the\ndefault. Doing such mappings is accomplished using the `mappings` option:\n\n```javascript\nvar i18n = require('webmaker-i18n');\n...\napp.use(i18n.middleware({\n  supported_languages: [\n    'en-US', 'en-GB', 'en-CA', 'th-TH', 'ru-RU'\n  ],\n  default_lang: 'en-US',\n  warnings: true,\n  translation_directory: path.join( __dirname, 'locale' ),\n  mappings: {\n    'en': 'en-US',\n    'th': 'th-TH',\n    'ru': 'ru-RU'\n  }\n}));\n```\n\nHere 8 languages are identified, 5 locale-based, and 3 defaults with no locale. Using such mappings,\nusers can request `th` or `th-TH` and get the same result. NOTE: no mappings are applied by default.\n\n**warnings** option is set to `false` by default. This option will enable language mapping console debug to see if the language that you are mapped to is successfully configured.\n\n#### Global enabling langauges\n\nIf you are using Transifex and want to download and enable all the languages supported in your project, you can accomplish this with the following steps:\n\n```\nsudo npm install -g transifex\n```\n\nYou will have to download all the translation files first using:\n\n```\ntransifex -u \"user:pass\" -p \"<project_name>\" -c \"<category_name>\" -d \"path_to_save_files\"\n```\n\n\n* name: The name of your project on Transifex which can be found in the url slug\n- https://www.transifex.com/projects/p/webmaker/\n* category_name: The category of your resource file(s) that you want to download for your project\n- Webmaker.org has `weblitstandard.json` and `webmaker.org.json` which are both categorized under `webmaker`.\n\nNow all the languages in your Transifex project will be downloaded to \"path_to_save_files\", for example your locale directory.  Each language will be stored as a locale-Country pair (i.e., en_US).\n\n``` javascript\nvar i18n = require('webmaker-i18n');\n\napp.use( i18n.middleware({\n  supported_languages: ['*'],\n  default_lang: 'en-US',\n  translation_directory: path.join( __dirname, 'locale' ),\n  mappings: {\n    'en': 'en-CA'\n  }\n}));\n```\n\n_Note:_ If you set ['*'] to the supported_languages option, the language codes will be read from the specified translation directory and supported_languages will be updated with the new list. This assumes you have already downloaded or otherwise created these directories yourself. For example, if you have locale/en_US and locale/fr the list of supported languages will include en-US and fr.\n\n### localeInfo\n\nThe `localeInfo` object contains all the locale information listed below:\n\nIf the request comes in as \"en-CA\"\n\n* `localeInfo.name` = \"English (Canada)\"\n* `localeInfo.engName` = \"English (Canada)\"\n* `localeInfo.lang` = \"en-CA\"\n* `localeInfo.locale` = \"en_CA\"\n* `localeInfo.momentLang` = \"en-ca\"\n* `localeInfo.direction` = \"ltr\"\n* `localeInfo.langPrefs` = \"[ 'en', 'es' ]\"\n* `localeInfo.alternateLangs` = \"['en']\"\n\nNote:\n\n* `localeInfo.langPrefs` is returned by `req.headers['accept-language']`. We parse only the next preferred language from the list exluding first element in array.\n* `localeInfo.alternateLangs` is a list of matched supported language compared to `localeInfo.langPrefs`. In other words, `alternateLangs` is a list of other locales/langs that were specified in accept-langauge and are also supported in the current instance..\n\n\n### getStrings\n\nThe `getStrings` function is used to get an object containing all strings for a given language. This\nwill include any strings missing from the given language, which are present in the default language.\n\n```javascript\nvar ru = i18n.getStrings('ru');\n```\n\n### stringsRoute\n\nThe `stringsRoute` is a convenience to expose `getStrings` as a route for Express. It takes one optional\nargument, the default language to use (defaults to \"en-US\" if missing). It can be used like so:\n\n```javascript\napp.get( \"/strings/:lang?\", i18n.stringsRoute( \"en-US\" ) );\n```\n\n### gettext\n\nThe `gettext` is expose to help get a specific string. It takes two arguement, key name and locale/language code.\n\n```javascript\nvar someString = i18n.gettext(\"keyName\", \"language code or locale code here\");\n```\n\nNote: This gettext is the same gettext that you can use in `request` scope, but this will allow you to use without server is running.\n\n### getLocales\n\nThe `getLocales` function is used to get a list (array) of supported locale names, and matches the\nnames of the folders that should be present in the `locale/` translation directory.\n\n```javascript\nvar locales = i18n.getLocales();\n```\n\n### getLanguages\n\nThe `getLanguages` function is used to get a list (array) of supported language names.\n\n```javascript\nvar languages = i18n.getLanguages();\n```\n\n### getSupportLanguages\n\nThe `getSupportLanguages` function is used to get a list (array) of supported language names based on the lang-Countries found in your translation directory.\n\n```javascript\nvar languages = i18n.getSupportLanguages();\n```\n\n### format\n\nThe `format` function provides string interpolation, and can be used with either an object for\nnamed variables, or an array  of values for positional replacement.\n\n```javascript\n// Named Example:\ni18n.format(\"%(salutation)s %(place)s\", {salutation: \"Hello\", place: \"World\"}, true);\n\n// Positional Example:\ni18n.format(\"%s %s\", [\"Hello\", \"World\"]);\n```\n\n### languageFrom, localeFrom\n\nThe `languageFrom` and `localeFrom` functions convert languages to locales and vice versa.\n\n```javascript\n// en-US (language) to en_US (locale)\nvar enUSlocale = localeFrom('en-US');\n\n// en_US (locale) to en-US language)\nvar enUSlanguage = languageFrom('en_US');\n```\n\n### languageNameFor\n\nThe `languageNameFor` function returns the language name based on the locale.\n\n```javascript\nvar languageName = languageNameFor('en-US');\n// The above will return \"English (US)\"\n\nvar languageName = languageNameFor('th-TH');\n// The above will return \"ไทย\"\n```\n\n### languageEnglishName\n\nThe `languageEnglishName` function returns the language name based on the locale in English.\n\n``` javascript\nvar languageName = languageEnglishName('en-US');\n// The above will return \"English (US)\"\n\nvar languageName = languageEnglishName('th-TH');\n// The above will return \"Thai\"\n```\n\n### getAllLocaleCodes\n\nThe `getAllLocaleCodes` function returns all locales, language name in native and English version.\n\n``` javascript\nvar i18n = require(\"webmaker-i18n\");\n\nvar allCodes = i18n.getAllLocaleCodes;\nconsole.log(allCodes);\n\n{\n  ...\n  ...\n  'ta': { nativeName: 'தமிழ்', englishName: 'Tamil' },\n  'ta-IN': { nativeName: 'தமிழ்', englishName: 'Tamil' },\n  te: { nativeName: 'తెలుగు', englishName: 'Telugu' },\n  'te-IN': { nativeName: 'తెలుగు', englishName: 'Telugu' },\n  'tg-TJ': { nativeName: 'тоҷикӣ', englishName: 'Tajik' },\n  'th-TH': { nativeName: 'ภาษาไทย', englishName: 'Thai' },\n  tl: { nativeName: 'Filipino', englishName: 'Filipino' },\n  'tl-PH': { nativeName: 'Filipino', englishName: 'Filipino' },\n  'tl-ST': { nativeName: 'tlhIngan-Hol', englishName: 'Klingon' },\n  'tr-TR': { nativeName: 'Türkçe', englishName: 'Turkish' },\n  'tt-RU': { nativeName: 'татарча', englishName: 'Tatar' },\n  'uk': { nativeName: 'Українська', englishName: 'Ukrainian' },\n  'uk-UA': { nativeName: 'Українська', englishName: 'Ukrainian' }\n  ...\n  ...\n}\n\n```\n\n## Client-Side in the browser\n\nInstall the browser `localized.js` script using bower:\n\n```\n$ bower install webmaker-i18n\n```\n\nThe `localized.js` script is usable with require.js or other AMD module loaders, and also in vanilla JavaScript.\nIn both cases, the code assumes that the HTML page it lives in has language information stored in the HTML element:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en-US\" dir=\"ltr\">\n<head>\n  ...\n  <script src=\"bower_components/webmaker-i18n/localized.js\"></script>\n```\n\n### AMD Usage\n\n```javascript\nrequire(['path/to/localized'], function(localized) {\n  // Don't do anything until the DOM + localized strings are ready\n  localized.ready(function(){\n    var someText = localized.get('some key');\n  });\n});\n```\n\n### Forcing Localized on the Global\n\nIn some cases, it might be desirable to have the `localized` object placed on the global (e.g., `window`) even though requirejs is present in the page. This can be accomplished by assigning `true` to `window.__LOCALIZED_IGNORE_REQUIREJS`.\n\n### Global Usage\n\nIf you aren't using an AMD loader like require.js, the object will get added to the global:\n\n```javascript\n// Don't do anything until the DOM + localized strings are ready\nLocalized.ready(function(){\n  var someText = localized.get('some key');\n});\n```\n\n### Localized members\n\nThe `localized.js` script exposes a number of functions:\n\n* `ready` - a function that initializes the strings (i.e., downloads) on the client-side. A callback\nshould be passed, as well as any desired options, which include `noCache` (whether to do cache busting, default is no)\nand `url` (the url end-point to use to call `getStrings` -- see above, default is '/strings/').  If the `url`\nis an absolute URL beginning in \"http\", the URL will not be processed in any way.  Otherwise, URLs get\nextra language info added (e.g., `/strings/[lang]`) based on what is in the HTML element's lang attribute.\n\n```javascript\nfunction readyCallback() {\n // Safe to use localized.get() now...\n}\n\nvar options = { noCache: true, url: '/localized' }\nlocalized.ready(options, readyCallback);\n// NOTE: you could also call it like so:\n// localized.ready(function(){...}); with no options.\n```\n\n* `getCurrentLang` - a function that returns the current language defined in the HTML element of the page.\n\n```html\n<html lang=\"th-TH\" dir=\"ltr\">\n...\n<script>\n...\n  var lang = localized.getCurrentLang();\n  // lang === 'th-TH'\n...\n</script>\n```\n\n* `langToMomentJSLang` - a function that converts the given language name to the [moment.js supported language name](momentLang.js)\n\n```javascript\nvar momentJSLang = langToMomentJSLang('en-US');\n// The above will return \"en\"\n\nvar momentJSLang = langToMomentJSLang('th-TH');\n// The above will return \"th\"\n\nvar momentJSLang = langToMomentJSLang('en-CA');\n// The above will return \"en-ca\"\n```\n\n\n* `get` - a function that gets the localized version of a given string key. Must be called after `ready` has completed so that\nthe localized strings are loaded.\n\n```javascript\nlocalized.ready(function(){\n  var localized = localized.get('some string key');\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mozilla/node-webmaker-i18n/issues"
  },
  "homepage": "https://github.com/mozilla/node-webmaker-i18n",
  "_id": "webmaker-i18n@0.3.21",
  "_from": "webmaker-i18n@0.3.21"
}
